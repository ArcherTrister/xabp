// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Content;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using X.Abp.VersionManagement.AppEditions;
using X.Abp.VersionManagement.AppEditions.Dtos;

// ReSharper disable once CheckNamespace
namespace X.Abp.VersionManagement.AppEditions;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IAppEditionAppService), typeof(AppEditionClientProxy))]
public partial class AppEditionClientProxy : ClientProxyBase<IAppEditionAppService>, IAppEditionAppService
{
    public virtual async Task<CheckUpdateOutput> CheckUpdateAndroidAsync(string appName, string arch, string channel, string currentVersion)
    {
        return await RequestAsync<CheckUpdateOutput>(nameof(CheckUpdateAndroidAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), appName },
            { typeof(string), arch },
            { typeof(string), channel },
            { typeof(string), currentVersion }
        });
    }

    public virtual async Task<string> CheckUpdateWinAsync(string appName, string arch, string channel, string fileName)
    {
        return await RequestAsync<string>(nameof(CheckUpdateWinAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), appName },
            { typeof(string), arch },
            { typeof(string), channel },
            { typeof(string), fileName }
        });
    }

    public virtual async Task<string> CheckUpdateMacAsync(string appName, string arch, string channel, string fileName)
    {
        return await RequestAsync<string>(nameof(CheckUpdateMacAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), appName },
            { typeof(string), arch },
            { typeof(string), channel },
            { typeof(string), fileName }
        });
    }

    public virtual async Task<AppUploaderOutput> UploadApplicationAsync(UploadApplicationInputWithStream input)
    {
        return await RequestAsync<AppUploaderOutput>(nameof(UploadApplicationAsync), new ClientProxyRequestTypeValue
        {
            { typeof(UploadApplicationInputWithStream), input }
        });
    }

    public virtual async Task<IRemoteStreamContent> DownloaderAsync(string appName, string platform, string arch, string channel)
    {
        return await RequestAsync<IRemoteStreamContent>(nameof(DownloaderAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), appName },
            { typeof(string), platform },
            { typeof(string), arch },
            { typeof(string), channel }
        });
    }

    public virtual async Task<AppEditionDto> CreateAsync(CreateAppEditionDto input)
    {
        return await RequestAsync<AppEditionDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateAppEditionDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<AppEditionDto> GetAsync(Guid id)
    {
        return await RequestAsync<AppEditionDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<AppEditionDto>> GetListAsync(PagedAppEditionDto input)
    {
        return await RequestAsync<PagedResultDto<AppEditionDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PagedAppEditionDto), input }
        });
    }

    public virtual async Task UpdateAsync(Guid id, UpdateAppEditionDto input)
    {
        await RequestAsync(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateAppEditionDto), input }
        });
    }

    public virtual async Task SetPublishedAsync(Guid id)
    {
        await RequestAsync(nameof(SetPublishedAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
