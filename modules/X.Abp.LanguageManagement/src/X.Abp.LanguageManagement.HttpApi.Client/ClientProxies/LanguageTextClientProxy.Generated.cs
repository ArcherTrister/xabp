// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using X.Abp.LanguageManagement;
using X.Abp.LanguageManagement.Dto;

// ReSharper disable once CheckNamespace
namespace X.Abp.LanguageManagement;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(ILanguageTextAppService), typeof(LanguageTextClientProxy))]
public partial class LanguageTextClientProxy : ClientProxyBase<ILanguageTextAppService>, ILanguageTextAppService
{
    public virtual async Task<PagedResultDto<LanguageTextDto>> GetListAsync(GetLanguagesTextsInput input)
    {
        return await RequestAsync<PagedResultDto<LanguageTextDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetLanguagesTextsInput), input }
        });
    }

    public virtual async Task<LanguageTextDto> GetAsync(string resourceName, string cultureName, string name, string baseCultureName)
    {
        return await RequestAsync<LanguageTextDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), resourceName },
            { typeof(string), cultureName },
            { typeof(string), name },
            { typeof(string), baseCultureName }
        });
    }

    public virtual async Task UpdateAsync(string resourceName, string cultureName, string name, string value)
    {
        await RequestAsync(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), resourceName },
            { typeof(string), cultureName },
            { typeof(string), name },
            { typeof(string), value }
        });
    }

    public virtual async Task RestoreToDefaultAsync(string resourceName, string cultureName, string name)
    {
        await RequestAsync(nameof(RestoreToDefaultAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), resourceName },
            { typeof(string), cultureName },
            { typeof(string), name }
        });
    }
}
