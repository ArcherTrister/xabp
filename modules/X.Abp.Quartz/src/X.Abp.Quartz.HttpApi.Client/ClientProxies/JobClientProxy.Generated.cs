// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using X.Abp.Quartz.Dtos;
using X.Abp.Quartz.Jobs;
using X.Abp.Quartz.Jobs.Dtos;

// ReSharper disable once CheckNamespace
namespace X.Abp.Quartz;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IJobAppService), typeof(JobClientProxy))]
public partial class JobClientProxy : ClientProxyBase<IJobAppService>, IJobAppService
{
    public virtual async Task<PagedResultDto<JobOrTriggerKeyDto>> GetListAsync(string schedulerName, GetJobListInput input)
    {
        return await RequestAsync<PagedResultDto<JobOrTriggerKeyDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), schedulerName },
            { typeof(GetJobListInput), input }
        });
    }

    public virtual async Task<JobDetailDto> GetAsync(string schedulerName, string jobGroup, string jobName)
    {
        return await RequestAsync<JobDetailDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), schedulerName },
            { typeof(string), jobGroup },
            { typeof(string), jobName }
        });
    }

    public virtual async Task<PagedResultDto<CurrentlyExecutingJobDto>> CurrentlyExecutingsAsync(string schedulerName, GetJobListInput input)
    {
        return await RequestAsync<PagedResultDto<CurrentlyExecutingJobDto>>(nameof(CurrentlyExecutingsAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), schedulerName },
            { typeof(GetJobListInput), input }
        });
    }

    public virtual async Task PauseAsync(string schedulerName, string jobGroup, string jobName)
    {
        await RequestAsync(nameof(PauseAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), schedulerName },
            { typeof(string), jobGroup },
            { typeof(string), jobName }
        });
    }

    public virtual async Task BatchPauseAsync(string schedulerName, GroupMatcherDto groupMatcher)
    {
        await RequestAsync(nameof(BatchPauseAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), schedulerName },
            { typeof(GroupMatcherDto), groupMatcher }
        });
    }

    public virtual async Task ResumeAsync(string schedulerName, string jobGroup, string jobName)
    {
        await RequestAsync(nameof(ResumeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), schedulerName },
            { typeof(string), jobGroup },
            { typeof(string), jobName }
        });
    }

    public virtual async Task BatchResumeAsync(string schedulerName, GroupMatcherDto groupMatcher)
    {
        await RequestAsync(nameof(BatchResumeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), schedulerName },
            { typeof(GroupMatcherDto), groupMatcher }
        });
    }

    public virtual async Task TriggerAsync(string schedulerName, string jobGroup, string jobName)
    {
        await RequestAsync(nameof(TriggerAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), schedulerName },
            { typeof(string), jobGroup },
            { typeof(string), jobName }
        });
    }

    public virtual async Task DeleteAsync(string schedulerName, string jobGroup, string jobName)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), schedulerName },
            { typeof(string), jobGroup },
            { typeof(string), jobName }
        });
    }

    public virtual async Task InterruptAsync(string schedulerName, string jobGroup, string jobName)
    {
        await RequestAsync(nameof(InterruptAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), schedulerName },
            { typeof(string), jobGroup },
            { typeof(string), jobName }
        });
    }

    public virtual async Task CreateAsync(string schedulerName, AddJobInput input)
    {
        await RequestAsync(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), schedulerName },
            { typeof(AddJobInput), input }
        });
    }
}
