// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using X.Abp.OpenIddict.Scopes;
using X.Abp.OpenIddict.Scopes.Dtos;

// ReSharper disable once CheckNamespace
namespace X.Abp.OpenIddict;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IScopeAppService), typeof(ScopeClientProxy))]
public partial class ScopeClientProxy : ClientProxyBase<IScopeAppService>, IScopeAppService
{
    public virtual async Task<ScopeDto> GetAsync(Guid id)
    {
        return await RequestAsync<ScopeDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<ScopeDto>> GetListAsync(GetScopeListInput input)
    {
        return await RequestAsync<PagedResultDto<ScopeDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetScopeListInput), input }
        });
    }

    public virtual async Task<ScopeDto> CreateAsync(CreateScopeInput input)
    {
        return await RequestAsync<ScopeDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateScopeInput), input }
        });
    }

    public virtual async Task<ScopeDto> UpdateAsync(Guid id, UpdateScopeInput input)
    {
        return await RequestAsync<ScopeDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateScopeInput), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<List<ScopeDto>> GetAllScopesAsync()
    {
        return await RequestAsync<List<ScopeDto>>(nameof(GetAllScopesAsync));
    }
}
