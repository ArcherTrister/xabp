// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using X.Abp.OpenIddict.Applications;
using X.Abp.OpenIddict.Applications.Dtos;

// ReSharper disable once CheckNamespace
namespace X.Abp.OpenIddict;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IApplicationAppService), typeof(ApplicationClientProxy))]
public partial class ApplicationClientProxy : ClientProxyBase<IApplicationAppService>, IApplicationAppService
{
    public virtual async Task<ApplicationDto> GetAsync(Guid id)
    {
        return await RequestAsync<ApplicationDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<ApplicationDto>> GetListAsync(GetApplicationListInput input)
    {
        return await RequestAsync<PagedResultDto<ApplicationDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetApplicationListInput), input }
        });
    }

    public virtual async Task<ApplicationDto> CreateAsync(CreateApplicationInput input)
    {
        return await RequestAsync<ApplicationDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateApplicationInput), input }
        });
    }

    public virtual async Task<ApplicationDto> UpdateAsync(Guid id, UpdateApplicationInput input)
    {
        return await RequestAsync<ApplicationDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateApplicationInput), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
