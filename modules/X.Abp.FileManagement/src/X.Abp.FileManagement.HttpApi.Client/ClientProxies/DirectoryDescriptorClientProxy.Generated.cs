// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using X.Abp.FileManagement.Directories;

// ReSharper disable once CheckNamespace
namespace X.Abp.FileManagement.Directories;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IDirectoryDescriptorAppService), typeof(DirectoryDescriptorClientProxy))]
public partial class DirectoryDescriptorClientProxy : ClientProxyBase<IDirectoryDescriptorAppService>, IDirectoryDescriptorAppService
{
    public virtual async Task<DirectoryDescriptorDto> GetAsync(Guid id)
    {
        return await RequestAsync<DirectoryDescriptorDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ListResultDto<DirectoryDescriptorInfoDto>> GetListAsync(Guid? parentId)
    {
        return await RequestAsync<ListResultDto<DirectoryDescriptorInfoDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid?), parentId }
        });
    }

    public virtual async Task<DirectoryDescriptorDto> CreateAsync(CreateDirectoryInput input)
    {
        return await RequestAsync<DirectoryDescriptorDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateDirectoryInput), input }
        });
    }

    public virtual async Task<DirectoryDescriptorDto> RenameAsync(Guid id, RenameDirectoryInput input)
    {
        return await RequestAsync<DirectoryDescriptorDto>(nameof(RenameAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(RenameDirectoryInput), input }
        });
    }

    public virtual async Task<PagedResultDto<DirectoryContentDto>> GetContentAsync(DirectoryContentRequestInput input)
    {
        return await RequestAsync<PagedResultDto<DirectoryContentDto>>(nameof(GetContentAsync), new ClientProxyRequestTypeValue
        {
            { typeof(DirectoryContentRequestInput), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<DirectoryDescriptorDto> MoveAsync(MoveDirectoryInput input)
    {
        return await RequestAsync<DirectoryDescriptorDto>(nameof(MoveAsync), new ClientProxyRequestTypeValue
        {
            { typeof(MoveDirectoryInput), input }
        });
    }
}
