// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Content;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using X.Abp.Account;
using X.Abp.Account.Dtos;
using X.Abp.Identity;

// ReSharper disable once CheckNamespace
namespace X.Abp.Account;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IAccountAppService), typeof(AccountClientProxy))]
public partial class AccountClientProxy : ClientProxyBase<IAccountAppService>, IAccountAppService
{
    public virtual async Task<IdentityUserDto> RegisterAsync(RegisterDto input)
    {
        return await RequestAsync<IdentityUserDto>(nameof(RegisterAsync), new ClientProxyRequestTypeValue
        {
            { typeof(RegisterDto), input }
        });
    }

    public virtual async Task SendPasswordResetCodeAsync(SendPasswordResetCodeDto input)
    {
        await RequestAsync(nameof(SendPasswordResetCodeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SendPasswordResetCodeDto), input }
        });
    }

    public virtual async Task ResetPasswordAsync(ResetPasswordDto input)
    {
        await RequestAsync(nameof(ResetPasswordAsync), new ClientProxyRequestTypeValue
        {
            { typeof(ResetPasswordDto), input }
        });
    }

    public virtual async Task<IdentityUserConfirmationStateDto> GetConfirmationStateAsync(Guid id)
    {
        return await RequestAsync<IdentityUserConfirmationStateDto>(nameof(GetConfirmationStateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task SendPhoneNumberConfirmationTokenAsync(SendPhoneNumberConfirmationTokenDto input)
    {
        await RequestAsync(nameof(SendPhoneNumberConfirmationTokenAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SendPhoneNumberConfirmationTokenDto), input }
        });
    }

    public virtual async Task SendEmailConfirmationTokenAsync(SendEmailConfirmationTokenDto input)
    {
        await RequestAsync(nameof(SendEmailConfirmationTokenAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SendEmailConfirmationTokenDto), input }
        });
    }

    public virtual async Task ConfirmPhoneNumberAsync(ConfirmPhoneNumberInput input)
    {
        await RequestAsync(nameof(ConfirmPhoneNumberAsync), new ClientProxyRequestTypeValue
        {
            { typeof(ConfirmPhoneNumberInput), input }
        });
    }

    public virtual async Task ConfirmEmailAsync(ConfirmEmailInput input)
    {
        await RequestAsync(nameof(ConfirmEmailAsync), new ClientProxyRequestTypeValue
        {
            { typeof(ConfirmEmailInput), input }
        });
    }

    public virtual async Task SetProfilePictureAsync(ProfilePictureInput input)
    {
        await RequestAsync(nameof(SetProfilePictureAsync), new ClientProxyRequestTypeValue
        {
            { typeof(ProfilePictureInput), input }
        });
    }

    public virtual async Task<ProfilePictureSourceDto> GetProfilePictureAsync(Guid id)
    {
        return await RequestAsync<ProfilePictureSourceDto>(nameof(GetProfilePictureAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<List<String>> GetTwoFactorProvidersAsync(GetTwoFactorProvidersInput input)
    {
        return await RequestAsync<List<String>>(nameof(GetTwoFactorProvidersAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetTwoFactorProvidersInput), input }
        });
    }

    public virtual async Task SendTwoFactorCodeAsync(SendTwoFactorCodeInput input)
    {
        await RequestAsync(nameof(SendTwoFactorCodeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SendTwoFactorCodeInput), input }
        });
    }

    public virtual async Task<PagedResultDto<IdentitySecurityLogDto>> GetSecurityLogListAsync(GetIdentitySecurityLogListInput input)
    {
        return await RequestAsync<PagedResultDto<IdentitySecurityLogDto>>(nameof(GetSecurityLogListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetIdentitySecurityLogListInput), input }
        });
    }

    public virtual async Task<IRemoteStreamContent> GetProfilePictureFileAsync(Guid id)
    {
        return await RequestAsync<IRemoteStreamContent>(nameof(GetProfilePictureFileAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task CaptchaValidateAsync(string captchaResponse)
    {
        await RequestAsync(nameof(CaptchaValidateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), captchaResponse }
        });
    }

    public virtual async Task<ExternalLoginsDto> GetExternalLoginsAsync()
    {
        return await RequestAsync<ExternalLoginsDto>(nameof(GetExternalLoginsAsync));
    }

    public virtual async Task RemoveLoginAsync(RemoveLoginInput input)
    {
        await RequestAsync(nameof(RemoveLoginAsync), new ClientProxyRequestTypeValue
        {
            { typeof(RemoveLoginInput), input }
        });
    }

    public virtual async Task<TwoFactorAuthenticationDto> GetTwoFactorAuthenticationAsync()
    {
        return await RequestAsync<TwoFactorAuthenticationDto>(nameof(GetTwoFactorAuthenticationAsync));
    }

    public virtual async Task<AuthenticatorInfoDto> GetAuthenticatorInfoAsync()
    {
        return await RequestAsync<AuthenticatorInfoDto>(nameof(GetAuthenticatorInfoAsync));
    }

    public virtual async Task<ShowRecoveryCodesDto> VerifyAuthenticatorCodeAsync(VerifyAuthenticatorCodeInput input)
    {
        return await RequestAsync<ShowRecoveryCodesDto>(nameof(VerifyAuthenticatorCodeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(VerifyAuthenticatorCodeInput), input }
        });
    }

    public virtual async Task ResetAuthenticatorAsync()
    {
        await RequestAsync(nameof(ResetAuthenticatorAsync));
    }

    public virtual async Task<ShowRecoveryCodesDto> GenerateRecoveryCodesAsync()
    {
        return await RequestAsync<ShowRecoveryCodesDto>(nameof(GenerateRecoveryCodesAsync));
    }
}
