@page
@using Microsoft.AspNetCore.Mvc.Localization;
@using Microsoft.Extensions.Options;
@using Volo.Abp.AspNetCore.Mvc.UI.Theming;
@using X.Abp.Account.Localization;
@using X.Abp.Account.Public.Web.Security.Captcha;
@using X.Abp.Account.Settings;
@using Volo.Abp.Settings;
@using X.Captcha;
@model X.Abp.Account.Public.Web.Pages.Account.LoginModel
@inject IHtmlLocalizer<AccountResource> L
@inject Volo.Abp.AspNetCore.Mvc.UI.Layout.IPageLayout PageLayout
@inject ISettingProvider SettingProvider
@inject IThemeManager ThemeManager
@{
    Layout = ThemeManager.CurrentTheme.GetAccountLayout();
    PageLayout.Content.Title = L["Login"].Value;

    var captchaVersion = await SettingProvider.GetOrNullAsync(AccountSettingNames.Captcha.Version);
    if (Model.UseCaptcha)
    {
        await Model.CaptchaOptions.SetAsync(captchaVersion);
    }

}

@section scripts
{
    @if (Model.UseCaptcha)
    {
        if (captchaVersion == CaptchaConsts.G3)
        {
            <g-captcha-v3-script />
            <g-captcha-v3-script-js action="login" callback="(function(){$('#@CaptchaValidatorBase.CaptchaResponseKey').val(token)})" />
        }
        else if(captchaVersion == CaptchaConsts.G2)
        {
            <g-captcha-v2-script />
        }
        else if (captchaVersion == CaptchaConsts.H2)
        {
            <h-captcha-v2-script />
        }
        else if (captchaVersion == CaptchaConsts.L2)
        {
            <l-captcha-v2-script />
        }
        else if (captchaVersion == CaptchaConsts.Re2)
        {
            <re-captcha-v2-script />
        }
        else
        {
            <re-captcha-v3-script />
            <re-captcha-v3-script-js action="login" callback="(function(){$('#@CaptchaValidatorBase.CaptchaResponseKey').val(token)})" />
        }
    }
}

@if (Model.IsLinkLogin)
{
    <abp-alert alert-type="Warning">
        @L["LinkAccountWarning", Url.PageLink()]
    </abp-alert>
}

<div class="account-module-form">
    @if (Model.EnableLocalLogin)
    {
        <form method="post">
            @if (Model.UseCaptcha)
            {
                <input type="hidden" name="@CaptchaValidatorBase.CaptchaResponseKey" id="@CaptchaValidatorBase.CaptchaResponseKey" />
            }
            <abp-input asp-for="LoginInput.UserNameOrEmailAddress" required-symbol="false"/>
            <abp-input asp-for="LoginInput.Password" required-symbol="false"/>
            <abp-row>
                <abp-column>
                    <abp-input asp-for="LoginInput.RememberMe" class="mb-4"/>
                </abp-column>
                <abp-column class="text-end">
                    <a href="@Url.Page("./ForgotPassword", new { returnUrl = Model.ReturnUrl, returnUrlHash = Model.ReturnUrlHash })">@L["ForgotPassword"]</a>
                </abp-column>
            </abp-row>

            @if (captchaVersion == CaptchaConsts.G2)
            {
                <g-captcha-v2-div callback="(function(){$('#@CaptchaValidatorBase.CaptchaResponseKey').val(token)})" />
            }
            @if (captchaVersion == CaptchaConsts.H2)
            {
                <h-captcha-v2-div callback="(function(){$('#@CaptchaValidatorBase.CaptchaResponseKey').val(token)})" />
            }
            @if (captchaVersion == CaptchaConsts.L2)
            {
                <l-captcha-v2-div callback="(function(){$('#@CaptchaValidatorBase.CaptchaResponseKey').val(token)})" />
            }
            @if (captchaVersion == CaptchaConsts.Re2)
            {
                <re-captcha-v2-div callback="(function(){$('#@CaptchaValidatorBase.CaptchaResponseKey').val(token)})" />
            }

            <div class="gap-2 d-grid">
                <abp-button button-type="Primary"type="submit" class="mb-3" name="Action" value="Login">@L["Login"]</abp-button>
            </div>

            @if (Model.ShowCancelButton)
            {
                <div class="gap-2 d-grid">
                    <abp-button button-type="Secondary" type="submit" formnovalidate="formnovalidate" class="mb-3" name="Action" value="Cancel">@L["Cancel"]</abp-button>
                </div>
            }
        </form>
        if (Model.IsSelfRegistrationEnabled)
        {
            @L["NotAMemberYet"]
            <a href="@Url.Page("./Register", new {returnUrl = Model.ReturnUrl, returnUrlHash = Model.ReturnUrlHash})">@L["Register"]</a>
        }
    }

    @if (Model.VisibleExternalProviders.Any())
    {
        <hr/>
        @L["OrSignInWith"]

        <br/>
        <form asp-page="./Login" asp-page-handler="ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" asp-route-returnUrlHash="@Model.ReturnUrlHash" method="post">
            @foreach (var provider in Model.VisibleExternalProviders)
            {
                <button
                    type="submit"
                    class="mt-2 me-2 btn btn-outline-primary btn-sm"
                    name="provider"
                    value="@provider.AuthenticationScheme"
                    data-busy-text="@L["ProcessingWithThreeDot"]">
                    @if (provider.Icon != null)
                    {
                        <i class="@provider.Icon"></i>
                    }
                    <span>@provider.DisplayName</span>
                </button>
            }
        </form>
    }
</div>
