@page
@using Microsoft.AspNetCore.Mvc.Localization;
@using X.Abp.Account.Localization;
@using X.Abp.Account.Public.Web.Security.Captcha;
@using X.Abp.Account.Settings;
@using Volo.Abp.Settings;
@using X.Captcha;
@model X.Abp.Account.Public.Web.Pages.Account.RegisterModel
@inject IHtmlLocalizer<AccountResource> L
@inject Volo.Abp.AspNetCore.Mvc.UI.Layout.IPageLayout PageLayout
@inject ISettingProvider SettingProvider
@{
    PageLayout.Content.Title = L["Register"].Value;
    var captchaVersion = await SettingProvider.GetOrNullAsync(AccountSettingNames.Captcha.Version);
}

@if (!Model.EnableLocalLogin)
{
    @section scripts
    {
        @if (Model.UseCaptcha)
        {
            if (captchaVersion == CaptchaConsts.G3)
            {
                <g-captcha-v3-script />
                <g-captcha-v3-script-js action="register" callback="(function(){$('#@CaptchaValidatorBase.CaptchaResponseKey').val(token)})" />
            }
            else if (captchaVersion == CaptchaConsts.G2)
            {
                <g-captcha-v2-script />
            }
            else if (captchaVersion == CaptchaConsts.H2)
            {
                <h-captcha-v2-script />
            }
            else if (captchaVersion == CaptchaConsts.L2)
            {
                <l-captcha-v2-script />
            }
            else if (captchaVersion == CaptchaConsts.Re2)
            {
                <re-captcha-v2-script />
            }
            else
            {
                <re-captcha-v3-script />
                <re-captcha-v3-script-js action="register" callback="(function(){$('#@CaptchaValidatorBase.CaptchaResponseKey').val(token)})" />
            }
        }
    }

    <div class="account-module-form">
        <form method="post" id="registerForm">

            @if (Model.UseCaptcha)
            {
                <input type="hidden" name="@CaptchaValidatorBase.CaptchaResponseKey" id="@CaptchaValidatorBase.CaptchaResponseKey" />
            }

            @if (!Model.IsExternalLogin)
            {
                <abp-input asp-for="Input.UserName" auto-focus="true"/>
            }

            <abp-input asp-for="Input.EmailAddress"/>

            @if (!Model.IsExternalLogin)
            {
                <abp-input asp-for="Input.Password"/>
            }

            @if (captchaVersion == CaptchaConsts.G2)
            {
                <g-captcha-v2-div callback="(function(){$('#@CaptchaValidatorBase.CaptchaResponseKey').val(token)})" />
            }
            @if (captchaVersion == CaptchaConsts.H2)
            {
                <h-captcha-v2-div callback="(function(){$('#@CaptchaValidatorBase.CaptchaResponseKey').val(token)})" />
            }
            @if (captchaVersion == CaptchaConsts.L2)
            {
                <l-captcha-v2-div callback="(function(){$('#@CaptchaValidatorBase.CaptchaResponseKey').val(token)})" />
            }
            @if (captchaVersion == CaptchaConsts.Re2)
            {
                <re-captcha-v2-div callback="(function(){$('#@CaptchaValidatorBase.CaptchaResponseKey').val(token)})" />
            }

            @if (Model.EnableLocalRegister || Model.IsExternalLoginOnly)
            {
                <div class="gap-2 d-grid">
                    <abp-button button-type="Primary" type="submit" class="mt-2 mb-3">@L["Register"]</abp-button>
                </div>
            }
        </form>

        @L["AlreadyRegistered"] <a href="@Url.Page("./Login", new {returnUrl = Model.ReturnUrl, returnUrlHash = Model.ReturnUrlHash})">@L["Login"]</a>

        @if(!Model.IsExternalLogin && Model.VisibleExternalProviders.Any())
        {
            <hr />
            @L["OrRegisterWith"]

            <br />
            <form asp-page="./Login" asp-page-handler="ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" asp-route-returnUrlHash="@Model.ReturnUrlHash" method="post">
                @foreach (var provider in Model.VisibleExternalProviders)
                {
                    <button type="submit"
                            class="mt-2 me-2 btn btn-outline-primary btn-sm"
                            name="provider"
                            value="@provider.AuthenticationScheme"
                            data-busy-text="@L["ProcessingWithThreeDot"]">
                        @if (provider.Icon != null)
                        {
                            <i class="@provider.Icon"></i>
                        }
                        <span>@provider.DisplayName</span>
                    </button>
                }
            </form>
        }
    </div>
}
