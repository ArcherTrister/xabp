@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Options
@using Volo.Abp.Features
@using Volo.Abp.Identity.Localization
@using Volo.Abp.MultiTenancy
@using X.Abp.Account.Localization
@using X.Abp.Account.Admin.Web.Pages.Account.Components.AccountSettingGroup
@using X.Abp.Account.ExternalProviders
@inject IHtmlLocalizer<AccountResource> L
@inject IHtmlLocalizer<IdentityResource> IdentityLocalizer
@inject IFeatureChecker FeatureChecker
@inject ICurrentTenant CurrentTenant
@inject IStringLocalizerFactory LocalizerFactory
@inject IOptions<AbpExternalProviderOptions> AbpExternalProvidersOptions
@model AccountSettingGroupViewComponent.AccountSettingsViewModel

<abp-tabs>
    <abp-tab active="true" title="@L["AccountSettingsGeneral"].Value">
        <form id="AccountSettingsForm">
            <div class="row">
                <div class="col-md-12">
                    <div>
                        <abp-input asp-for="@Model.AccountSettings.IsSelfRegistrationEnabled" name="IsSelfRegistrationEnabled" />
                        <abp-input asp-for="@Model.AccountSettings.EnableLocalLogin" name="EnableLocalLogin" />
                    </div>
                    <hr class="my-4" />
                    <div>
                        <abp-button button-type="Primary" type="submit"><i class="fa fa-save"></i> @L["Save"]</abp-button>
                    </div>
                </div>
            </div>
        </form>
    </abp-tab>

    @if (Model.AccountTwoFactorSettings != null)
    {
        <abp-tab title="@L["AccountSettingsTwoFactor"].Value">
            <form id="AccountTwoFactorSettingsForm">
                <div class="row">
                    <div class="col-md-12">
                        <div>
                            <h4>@L["TwoFactorAuthentication"]</h4>
                            <div>
                                <abp-select asp-for="@Model.AccountTwoFactorSettings.TwoFactorBehaviour" label="@IdentityLocalizer["DisplayName:Abp.Identity.TwoFactorBehaviour"].Value" name="TwoFactorBehaviour"/>
                                <abp-input asp-for="@Model.AccountTwoFactorSettings.UsersCanChange" label="@IdentityLocalizer["DisplayName:Abp.Identity.UsersCanChange"].Value" name="UsersCanChange" />
                                <abp-input asp-for="@Model.AccountTwoFactorSettings.IsRememberBrowserEnabled" name="IsRememberBrowserEnabled" />
                            </div>
                            <hr class="my-4" />
                         </div>
                        <hr class="my-4" />
                        <div>
                            <abp-button button-type="Primary" type="submit"><i class="fa fa-save"></i> @L["Save"]</abp-button>
                        </div>
                    </div>
                </div>
            </form>
        </abp-tab>
    }
    @if (Model.AccountRecaptchaSettings != null &&
        (!CurrentTenant.IsAvailable ||
         Model.AccountRecaptchaSettings.UseCaptchaOnLogin ||
         Model.AccountRecaptchaSettings.UseCaptchaOnRegistration))
    {
        <abp-tab title="@L["Captcha"].Value">
            <form id="AccountCaptchaSettingsForm">
                <div class="row">
                    <div class="col-md-12">
                        <div>
                            <h4>@L["Captcha"]</h4>
                            @if (!CurrentTenant.IsAvailable)
                            {
                                <abp-input asp-for="@Model.AccountRecaptchaSettings.UseCaptchaOnLogin" name="UseCaptchaOnLogin" />
                                <abp-input asp-for="@Model.AccountRecaptchaSettings.UseCaptchaOnRegistration" name="UseCaptchaOnRegistration" />
                                <abp-input asp-for="@Model.AccountRecaptchaSettings.VerifyBaseUrl" name="VerifyBaseUrl" />
                            }
                            
                            @{
                                // TODO: Recaptcha Version
                                var versionItems = new List<SelectListItem>
                                {
                                    new("HCaptcha V2", "hCaptcha_V2"),
                                    new("LCaptcha V2", "lCaptcha_V2"),
                                    new("GCaptcha V2", "gCaptcha_V2"),
                                    new("GCaptcha V3", "gCaptcha_V3"),
                                    new("ReCaptcha V2", "reCaptcha_V2"),
                                    new("ReCaptcha V3", "reCaptcha_V3")
                                };
                            }

                            <abp-select asp-for="@Model.AccountRecaptchaSettings.Version" asp-items="@versionItems" name="Version"/>
                            <abp-input asp-for="@Model.AccountRecaptchaSettings.SiteKey" name="SiteKey" info="@L["SetNullWillUseGlobalSettings"].Value" />
                            <abp-input asp-for="@Model.AccountRecaptchaSettings.SiteSecret" name="SiteSecret" info="@L["SetNullWillUseGlobalSettings"].Value" />
                            <div>
                                <abp-input asp-for="@Model.AccountRecaptchaSettings.Score" name="Score" type="number"/>
                            </div>
                        </div>
                        <hr class="my-4" />
                        <div>
                            <abp-button button-type="Primary" type="submit"><i class="fa fa-save"></i> @L["Save"]</abp-button>
                        </div>
                    </div>
                </div>
            </form>
        </abp-tab>
    }

    @if ((!CurrentTenant.IsAvailable && Model.AccountExternalProviderSettings.Settings.Any())
         || (CurrentTenant.IsAvailable && Model.AccountExternalProviderSettings.Settings.Any(x => x.Enabled)))
    {
        var defaultLocalizer = LocalizerFactory.CreateDefaultOrNull();

        <abp-tab title="@L["AccountExternalProviderSettings"].Value">
            <form id="AccountExternalProviderSettingsForm">
                <div class="row">
                    <div class="col-md-12">
                        @if (CurrentTenant.IsAvailable)
                        {
                           foreach (var provider in Model.AccountExternalProviderSettings.Settings.Where(setting => setting.Enabled))
                           {
                               <div class="provider_container">
                                   <h4>@ExternalLoginProviderLocalizationHelper.Localize(defaultLocalizer,$"ExternalProvider:{provider.Name}", provider.Name)</h4>

                                   <input type="hidden" name="Name" value="@provider.Name">

                                   <div class="form-check">
                                       <input type="checkbox" class="form-check-input" id="@(provider.Name)UseHostSettings" data-collapse="@(provider.Name)Collapse" @(!provider.IsValid() ? "checked=\"checked\"" : "")>
                                       <label class="form-check-label" for="@(provider.Name)UseHostSettings">@L["ExternalProviderUseHostSettings"]</label>
                                   </div>

                                   <div class="collapse @(provider.IsValid() ? "show" : "")" id="@(provider.Name)Collapse">
                                       @foreach (var property in provider.Properties)
                                       {
                                           <div class="mb-3">
                                               <label class="form-label" for="@($"{provider.Name}.{property.Name}")">@ExternalLoginProviderLocalizationHelper.Localize(defaultLocalizer, $"ExternalProvider:{provider.Name}:{property.Name}", property.Name)</label>
                                               <input type="text" name="@($"Properties.{property.Name}")" class="form-control" id="@($"{provider.Name}.{property.Name}")" value="@property.Value">
                                           </div>
                                       }
                                       @foreach (var property in provider.SecretProperties)
                                       {
                                           <div class="mb-3">
                                               <label class="form-label" for="@($"{provider.Name}.{property.Name}")">@ExternalLoginProviderLocalizationHelper.Localize(defaultLocalizer, $"ExternalProvider:{provider.Name}:{property.Name}", property.Name)</label>
                                               <input type="password" autocomplete="new-password" name="@($"SecretProperties.{property.Name}")" class="form-control" id="@($"{provider.Name}.{property.Name}")" value="@property.Value">
                                           </div>
                                       }
                                   </div>

                                   <hr class="my-4"/>
                               </div>
                           }
                        }
                        else
                        {
                           foreach (var provider in Model.AccountExternalProviderSettings.Settings)
                           {
                               <div class="provider_container">
                                   <h4>@ExternalLoginProviderLocalizationHelper.Localize(defaultLocalizer,$"ExternalProvider:{provider.Name}", provider.Name)</h4>

                                  <input type="hidden" name="Name" value="@provider.Name">

                                  <div class="form-check mb-3">
                                      <input type="checkbox" value="true" @(provider.Enabled ? "checked=\"checked\"" : "") id="@($"{provider.Name}.Enabled")" name="Enabled" class="form-check-input">
                                      <label class="form-check-label" for="@($"{provider.Name}.Enabled")">@L["ExternalProviderEnabled"].Value</label>
                                  </div>

                                  @foreach (var property in provider.Properties)
                                  {
                                      <div class="mb-3">
                                          <label class="form-label" for="@($"{provider.Name}.{property.Name}")">@ExternalLoginProviderLocalizationHelper.Localize(defaultLocalizer, $"ExternalProvider:{provider.Name}:{property.Name}", property.Name)</label>
                                          <input type="text" name="@($"Properties.{property.Name}")" class="form-control" id="@($"{provider.Name}.{property.Name}")" value="@property.Value">
                                      </div>
                                  }
                                  @foreach (var property in provider.SecretProperties)
                                  {
                                      <div class="mb-3">
                                          <label class="form-label" for="@($"{provider.Name}.{property.Name}")">@ExternalLoginProviderLocalizationHelper.Localize(defaultLocalizer, $"ExternalProvider:{provider.Name}:{property.Name}", property.Name)</label>
                                          <input type="password" autocomplete="new-password" name="@($"SecretProperties.{property.Name}")" class="form-control" id="@($"{provider.Name}.{property.Name}")" value="@property.Value">
                                      </div>
                                  }

                                  <hr class="my-4"/>
                               </div>
                           }
                        }

                        <div>
                            <abp-button button-type="Primary" type="submit"><i class="fa fa-save"></i> @L["Save"]</abp-button>
                        </div>

                    </div>
                </div>
            </form>
        </abp-tab>
    }

</abp-tabs>
