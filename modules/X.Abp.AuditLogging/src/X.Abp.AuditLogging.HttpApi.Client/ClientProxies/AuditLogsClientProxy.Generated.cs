// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using X.Abp.AuditLogging;
using X.Abp.AuditLogging.Dtos;

// ReSharper disable once CheckNamespace
namespace X.Abp.AuditLogging;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IAuditLogsAppService), typeof(AuditLogsClientProxy))]
public partial class AuditLogsClientProxy : ClientProxyBase<IAuditLogsAppService>, IAuditLogsAppService
{
    public virtual async Task<PagedResultDto<AuditLogDto>> GetListAsync(GetAuditLogListDto input)
    {
        return await RequestAsync<PagedResultDto<AuditLogDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetAuditLogListDto), input }
        });
    }

    public virtual async Task<AuditLogDto> GetAsync(Guid id)
    {
        return await RequestAsync<AuditLogDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<GetErrorRateOutput> GetErrorRateAsync(GetErrorRateFilter filter)
    {
        return await RequestAsync<GetErrorRateOutput>(nameof(GetErrorRateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetErrorRateFilter), filter }
        });
    }

    public virtual async Task<GetAverageExecutionDurationPerDayOutput> GetAverageExecutionDurationPerDayAsync(GetAverageExecutionDurationPerDayInput filter)
    {
        return await RequestAsync<GetAverageExecutionDurationPerDayOutput>(nameof(GetAverageExecutionDurationPerDayAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetAverageExecutionDurationPerDayInput), filter }
        });
    }

    public virtual async Task<PagedResultDto<EntityChangeDto>> GetEntityChangesAsync(GetEntityChangesDto input)
    {
        return await RequestAsync<PagedResultDto<EntityChangeDto>>(nameof(GetEntityChangesAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetEntityChangesDto), input }
        });
    }

    public virtual async Task<List<EntityChangeWithUsernameDto>> GetEntityChangesWithUsernameAsync(EntityChangeFilter input)
    {
        return await RequestAsync<List<EntityChangeWithUsernameDto>>(nameof(GetEntityChangesWithUsernameAsync), new ClientProxyRequestTypeValue
        {
            { typeof(EntityChangeFilter), input }
        });
    }

    public virtual async Task<EntityChangeWithUsernameDto> GetEntityChangeWithUsernameAsync(Guid entityChangeId)
    {
        return await RequestAsync<EntityChangeWithUsernameDto>(nameof(GetEntityChangeWithUsernameAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), entityChangeId }
        });
    }

    public virtual async Task<EntityChangeDto> GetEntityChangeAsync(Guid entityChangeId)
    {
        return await RequestAsync<EntityChangeDto>(nameof(GetEntityChangeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), entityChangeId }
        });
    }
}
