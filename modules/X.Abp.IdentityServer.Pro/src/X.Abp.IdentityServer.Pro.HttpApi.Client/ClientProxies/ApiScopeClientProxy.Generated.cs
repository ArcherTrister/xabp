// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using X.Abp.IdentityServer.ApiScope;
using X.Abp.IdentityServer.ApiScope.Dtos;

// ReSharper disable once CheckNamespace
namespace X.Abp.IdentityServer;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IApiScopeAppService), typeof(ApiScopeClientProxy))]
public partial class ApiScopeClientProxy : ClientProxyBase<IApiScopeAppService>, IApiScopeAppService
{
    public virtual async Task<ApiScopeWithDetailsDto> CreateAsync(CreateApiScopeDto input)
    {
        return await RequestAsync<ApiScopeWithDetailsDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateApiScopeDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ApiScopeWithDetailsDto> GetAsync(Guid id)
    {
        return await RequestAsync<ApiScopeWithDetailsDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<ApiScopeWithDetailsDto>> GetListAsync(GetApiScopeListInput input)
    {
        return await RequestAsync<PagedResultDto<ApiScopeWithDetailsDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetApiScopeListInput), input }
        });
    }

    public virtual async Task<List<ApiScopeWithDetailsDto>> GetAllListAsync()
    {
        return await RequestAsync<List<ApiScopeWithDetailsDto>>(nameof(GetAllListAsync));
    }

    public virtual async Task<ApiScopeWithDetailsDto> UpdateAsync(Guid id, UpdateApiScopeDto input)
    {
        return await RequestAsync<ApiScopeWithDetailsDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateApiScopeDto), input }
        });
    }
}
