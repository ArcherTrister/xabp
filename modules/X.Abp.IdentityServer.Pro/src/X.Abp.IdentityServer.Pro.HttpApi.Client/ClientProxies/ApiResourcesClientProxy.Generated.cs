// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using X.Abp.IdentityServer.ApiResource;
using X.Abp.IdentityServer.ApiResource.Dtos;

// ReSharper disable once CheckNamespace
namespace X.Abp.IdentityServer;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IApiResourceAppService), typeof(ApiResourcesClientProxy))]
public partial class ApiResourcesClientProxy : ClientProxyBase<IApiResourceAppService>, IApiResourceAppService
{
    public virtual async Task<PagedResultDto<ApiResourceWithDetailsDto>> GetListAsync(GetApiResourceListInput input)
    {
        return await RequestAsync<PagedResultDto<ApiResourceWithDetailsDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetApiResourceListInput), input }
        });
    }

    public virtual async Task<List<ApiResourceWithDetailsDto>> GetAllListAsync()
    {
        return await RequestAsync<List<ApiResourceWithDetailsDto>>(nameof(GetAllListAsync));
    }

    public virtual async Task<ApiResourceWithDetailsDto> GetAsync(Guid id)
    {
        return await RequestAsync<ApiResourceWithDetailsDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ApiResourceWithDetailsDto> CreateAsync(CreateApiResourceDto input)
    {
        return await RequestAsync<ApiResourceWithDetailsDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateApiResourceDto), input }
        });
    }

    public virtual async Task<ApiResourceWithDetailsDto> UpdateAsync(Guid id, UpdateApiResourceDto input)
    {
        return await RequestAsync<ApiResourceWithDetailsDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateApiResourceDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
