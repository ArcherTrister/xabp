// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using X.Abp.Payment.Plans;
using X.Abp.Saas;
using X.Abp.Saas.Dtos;

// ReSharper disable once CheckNamespace
namespace X.Abp.Saas;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IEditionAppService), typeof(EditionClientProxy))]
public partial class EditionClientProxy : ClientProxyBase<IEditionAppService>, IEditionAppService
{
    public virtual async Task<EditionDto> GetAsync(Guid id)
    {
        return await RequestAsync<EditionDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<EditionDto>> GetListAsync(GetEditionsInput input)
    {
        return await RequestAsync<PagedResultDto<EditionDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetEditionsInput), input }
        });
    }

    public virtual async Task<EditionDto> CreateAsync(EditionCreateDto input)
    {
        return await RequestAsync<EditionDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(EditionCreateDto), input }
        });
    }

    public virtual async Task<EditionDto> UpdateAsync(Guid id, EditionUpdateDto input)
    {
        return await RequestAsync<EditionDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(EditionUpdateDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<GetEditionUsageStatisticsResultDto> GetUsageStatisticsAsync()
    {
        return await RequestAsync<GetEditionUsageStatisticsResultDto>(nameof(GetUsageStatisticsAsync));
    }

    public virtual async Task<List<PlanDto>> GetPlanLookupAsync()
    {
        return await RequestAsync<List<PlanDto>>(nameof(GetPlanLookupAsync));
    }

    public virtual async Task<List<EditionDto>> GetAllListAsync()
    {
        return await RequestAsync<List<EditionDto>>(nameof(GetAllListAsync));
    }

    public virtual async Task MoveAllTenantsAsync(Guid id, Guid? targetEditionId)
    {
        await RequestAsync(nameof(MoveAllTenantsAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(Guid?), targetEditionId }
        });
    }
}
