// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using X.Abp.Payment.Requests;

// ReSharper disable once CheckNamespace
namespace X.Abp.Payment.Requests;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IPaymentRequestAppService), typeof(PaymentRequestClientProxy))]
public partial class PaymentRequestClientProxy : ClientProxyBase<IPaymentRequestAppService>, IPaymentRequestAppService
{
    public virtual async Task<PaymentRequestWithDetailsDto> CompleteAsync(string paymentGateway, Dictionary<String, String> parameters)
    {
        return await RequestAsync<PaymentRequestWithDetailsDto>(nameof(CompleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), paymentGateway },
            { typeof(Dictionary<String, String>), parameters }
        });
    }

    public virtual async Task<PaymentRequestWithDetailsDto> CreateAsync(PaymentRequestCreateDto input)
    {
        return await RequestAsync<PaymentRequestWithDetailsDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PaymentRequestCreateDto), input }
        });
    }

    public virtual async Task<PaymentRequestWithDetailsDto> GetAsync(Guid id)
    {
        return await RequestAsync<PaymentRequestWithDetailsDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<bool> HandleWebhookAsync(string paymentGateway, string payload, Dictionary<String, String> headers)
    {
        return await RequestAsync<bool>(nameof(HandleWebhookAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), paymentGateway },
            { typeof(string), payload },
            { typeof(Dictionary<String, String>), headers }
        });
    }

    public virtual async Task<PaymentRequestStartResultDto> StartAsync(string paymentGateway, PaymentRequestStartDto input)
    {
        return await RequestAsync<PaymentRequestStartResultDto>(nameof(StartAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), paymentGateway },
            { typeof(PaymentRequestStartDto), input }
        });
    }
}
