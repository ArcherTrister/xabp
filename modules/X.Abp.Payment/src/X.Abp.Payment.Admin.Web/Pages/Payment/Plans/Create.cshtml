@page
@using Microsoft.Extensions.Localization;
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Modal;
@using Volo.Abp.Localization;
@using Volo.Abp.ObjectExtending;
@using X.Abp.Payment.Admin.Web.Menus;
@using X.Abp.Payment.Admin.Web.Pages.Payment.Plans;
@using X.Abp.Payment.Admin.Web.Pages;
@using X.Abp.Payment.Localization;
@using Microsoft.AspNetCore.Mvc.Localization;
@using Microsoft.AspNetCore.Mvc.TagHelpers;
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Form;
@using Volo.Abp.Data;
@using X.Abp.Payment.Admin.Web.Pages.Payment;

@inject IStringLocalizerFactory StringLocalizerFactory

@inherits PaymentAdminPageBase

@model CreateModalModel

@{
    Layout = null;
}

<form asp-page="/Payment/Plans/CreateModal">
    <abp-modal>
        <abp-modal-header title="@L["New"].Value"></abp-modal-header>
        <abp-modal-body>
            <abp-input asp-for="Plan.Name" />

            @foreach (var propertyInfo in ObjectExtensionManager.Instance.GetProperties<PlanCreateViewModel>())
            {
                if (!propertyInfo.Name.EndsWith("_Text"))
                {
                    if (propertyInfo.Type.IsEnum || !propertyInfo.Lookup.Url.IsNullOrEmpty())
                    {
                        if (propertyInfo.Type.IsEnum)
                        {
                            Model.Plan.ExtraProperties.ToEnum(propertyInfo.Name, propertyInfo.Type);
                        }
                        <abp-select asp-for="Plan.ExtraProperties[propertyInfo.Name]"
                        label="@propertyInfo.GetLocalizedDisplayName(StringLocalizerFactory)"
                        autocomplete-api-url="@propertyInfo.Lookup.Url"
                        autocomplete-selected-item-name="@Model.Plan.GetProperty(propertyInfo.Name+"_Text")"
                        autocomplete-selected-item-value="@Model.Plan.GetProperty(propertyInfo.Name)"
                        autocomplete-filter-param-name="@propertyInfo.Lookup.FilterParamName"
                        autocomplete-items-property-name="@propertyInfo.Lookup.ResultListPropertyName"
                        autocomplete-display-property-name="@propertyInfo.Lookup.DisplayPropertyName"
                        autocomplete-value-property-name="@propertyInfo.Lookup.ValuePropertyName"></abp-select>
                    }
                    else
                    {
                        <abp-input type="@propertyInfo.GetInputType()"
                       asp-for="Plan.ExtraProperties[propertyInfo.Name]"
                       label="@propertyInfo.GetLocalizedDisplayName(StringLocalizerFactory)"
                       asp-format="@propertyInfo.GetInputFormatOrNull()"
                       value="@propertyInfo.GetInputValueOrNull(Model.Plan.GetProperty(propertyInfo.Name))" />
                    }
                }
            }
        </abp-modal-body>
        <abp-modal-footer buttons="@(AbpModalButtons.Cancel|AbpModalButtons.Save)"></abp-modal-footer>
    </abp-modal>
</form>
