// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using X.Abp.Identity;

// ReSharper disable once CheckNamespace
namespace X.Abp.Identity;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IIdentityClaimTypeAppService), typeof(IdentityClaimTypeClientProxy))]
public partial class IdentityClaimTypeClientProxy : ClientProxyBase<IIdentityClaimTypeAppService>, IIdentityClaimTypeAppService
{
    public virtual async Task<PagedResultDto<ClaimTypeDto>> GetListAsync(GetIdentityClaimTypesInput input)
    {
        return await RequestAsync<PagedResultDto<ClaimTypeDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetIdentityClaimTypesInput), input }
        });
    }

    public virtual async Task<ClaimTypeDto> GetAsync(Guid id)
    {
        return await RequestAsync<ClaimTypeDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ClaimTypeDto> CreateAsync(CreateClaimTypeDto input)
    {
        return await RequestAsync<ClaimTypeDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateClaimTypeDto), input }
        });
    }

    public virtual async Task<ClaimTypeDto> UpdateAsync(Guid id, UpdateClaimTypeDto input)
    {
        return await RequestAsync<ClaimTypeDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateClaimTypeDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
