// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using X.Abp.Identity;

// ReSharper disable once CheckNamespace
namespace X.Abp.Identity;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IOrganizationUnitAppService), typeof(OrganizationUnitClientProxy))]
public partial class OrganizationUnitClientProxy : ClientProxyBase<IOrganizationUnitAppService>, IOrganizationUnitAppService
{
    public virtual async Task AddRolesAsync(Guid id, OrganizationUnitRoleInput input)
    {
        await RequestAsync(nameof(AddRolesAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(OrganizationUnitRoleInput), input }
        });
    }

    public virtual async Task AddMembersAsync(Guid id, OrganizationUnitUserInput input)
    {
        await RequestAsync(nameof(AddMembersAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(OrganizationUnitUserInput), input }
        });
    }

    public virtual async Task<OrganizationUnitWithDetailsDto> CreateAsync(OrganizationUnitCreateDto input)
    {
        return await RequestAsync<OrganizationUnitWithDetailsDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(OrganizationUnitCreateDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<OrganizationUnitWithDetailsDto> GetAsync(Guid id)
    {
        return await RequestAsync<OrganizationUnitWithDetailsDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<OrganizationUnitWithDetailsDto>> GetListAsync(GetOrganizationUnitInput input)
    {
        return await RequestAsync<PagedResultDto<OrganizationUnitWithDetailsDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetOrganizationUnitInput), input }
        });
    }

    public virtual async Task<ListResultDto<OrganizationUnitWithDetailsDto>> GetListAllAsync()
    {
        return await RequestAsync<ListResultDto<OrganizationUnitWithDetailsDto>>(nameof(GetListAllAsync));
    }

    public virtual async Task<PagedResultDto<IdentityRoleDto>> GetRolesAsync(Guid id, PagedAndSortedResultRequestDto input)
    {
        return await RequestAsync<PagedResultDto<IdentityRoleDto>>(nameof(GetRolesAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(PagedAndSortedResultRequestDto), input }
        });
    }

    public virtual async Task<PagedResultDto<IdentityUserDto>> GetMembersAsync(Guid id, GetIdentityUsersInput input)
    {
        return await RequestAsync<PagedResultDto<IdentityUserDto>>(nameof(GetMembersAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(GetIdentityUsersInput), input }
        });
    }

    public virtual async Task MoveAsync(Guid id, OrganizationUnitMoveInput input)
    {
        await RequestAsync(nameof(MoveAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(OrganizationUnitMoveInput), input }
        });
    }

    public virtual async Task<PagedResultDto<IdentityUserDto>> GetAvailableUsersAsync(GetAvailableUsersInput input)
    {
        return await RequestAsync<PagedResultDto<IdentityUserDto>>(nameof(GetAvailableUsersAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetAvailableUsersInput), input }
        });
    }

    public virtual async Task<PagedResultDto<IdentityRoleDto>> GetAvailableRolesAsync(GetAvailableRolesInput input)
    {
        return await RequestAsync<PagedResultDto<IdentityRoleDto>>(nameof(GetAvailableRolesAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetAvailableRolesInput), input }
        });
    }

    public virtual async Task<OrganizationUnitWithDetailsDto> UpdateAsync(Guid id, OrganizationUnitUpdateDto input)
    {
        return await RequestAsync<OrganizationUnitWithDetailsDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(OrganizationUnitUpdateDto), input }
        });
    }

    public virtual async Task RemoveMemberAsync(Guid id, Guid memberId)
    {
        await RequestAsync(nameof(RemoveMemberAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(Guid), memberId }
        });
    }

    public virtual async Task RemoveRoleAsync(Guid id, Guid roleId)
    {
        await RequestAsync(nameof(RemoveRoleAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(Guid), roleId }
        });
    }
}
