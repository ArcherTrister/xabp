// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using X.Abp.Identity;

// ReSharper disable once CheckNamespace
namespace X.Abp.Identity;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IIdentitySettingsAppService), typeof(IdentitySettingsClientProxy))]
public partial class IdentitySettingsClientProxy : ClientProxyBase<IIdentitySettingsAppService>, IIdentitySettingsAppService
{
    public virtual async Task<IdentitySettingsDto> GetAsync()
    {
        return await RequestAsync<IdentitySettingsDto>(nameof(GetAsync));
    }

    public virtual async Task UpdateAsync(IdentitySettingsDto input)
    {
        await RequestAsync(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(IdentitySettingsDto), input }
        });
    }

    public virtual async Task<IdentityLdapSettingsDto> GetLdapAsync()
    {
        return await RequestAsync<IdentityLdapSettingsDto>(nameof(GetLdapAsync));
    }

    public virtual async Task UpdateLdapAsync(IdentityLdapSettingsDto input)
    {
        await RequestAsync(nameof(UpdateLdapAsync), new ClientProxyRequestTypeValue
        {
            { typeof(IdentityLdapSettingsDto), input }
        });
    }

    public virtual async Task<IdentityOAuthSettingsDto> GetOAuthAsync()
    {
        return await RequestAsync<IdentityOAuthSettingsDto>(nameof(GetOAuthAsync));
    }

    public virtual async Task UpdateOAuthAsync(IdentityOAuthSettingsDto input)
    {
        await RequestAsync(nameof(UpdateOAuthAsync), new ClientProxyRequestTypeValue
        {
            { typeof(IdentityOAuthSettingsDto), input }
        });
    }

    public virtual async Task<IdentitySessionSettingsDto> GetSessionAsync()
    {
        return await RequestAsync<IdentitySessionSettingsDto>(nameof(GetSessionAsync));
    }

    public virtual async Task UpdateSessionAsync(IdentitySessionSettingsDto input)
    {
        await RequestAsync(nameof(UpdateSessionAsync), new ClientProxyRequestTypeValue
        {
            { typeof(IdentitySessionSettingsDto), input }
        });
    }
}
