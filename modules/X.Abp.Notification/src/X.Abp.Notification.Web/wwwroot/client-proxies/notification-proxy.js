/* This file is automatically generated by ABP framework to use MVC Controllers from javascript. */


// module notification

(function(){

  // controller x.abp.notification.notification

  (function(){

    abp.utils.createNamespace(window, 'x.abp.notification.notification');

    x.abp.notification.notification.get = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/notification',
        type: 'GET'
      }, ajaxParams));
    };

    x.abp.notification.notification.getAssignableNotifications = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/notification/assignable-notifications',
        type: 'GET'
      }, ajaxParams));
    };

    x.abp.notification.notification.getAssignableNotifiers = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/notification/assignable-notifiers',
        type: 'GET'
      }, ajaxParams));
    };

    x.abp.notification.notification.sendByCurrentTenant = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/notification/send-by-current-tenant',
        type: 'POST',
        dataType: null,
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    x.abp.notification.notification.sendByTenants = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/notification/send-by-tenants',
        type: 'POST',
        dataType: null,
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    x.abp.notification.notification.sendByUsers = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/notification/send-by-users',
        type: 'POST',
        dataType: null,
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    x.abp.notification.notification.sendByExcludedUsers = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/notification/send-by-excluded-users',
        type: 'POST',
        dataType: null,
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    x.abp.notification.notification.getUnPublishedNotifications = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/notification/un-published-notifications',
        type: 'GET'
      }, ajaxParams));
    };

  })();

  // controller x.abp.notification.userNotification

  (function(){

    abp.utils.createNamespace(window, 'x.abp.notification.userNotification');

    x.abp.notification.userNotification['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/notification/user-notification/' + id + '',
        type: 'DELETE',
        dataType: null
      }, ajaxParams));
    };

    x.abp.notification.userNotification.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/notification/user-notification/' + id + '',
        type: 'GET'
      }, ajaxParams));
    };

    x.abp.notification.userNotification.getList = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/notification/user-notification' + abp.utils.buildQueryString([{ name: 'state', value: input.state }, { name: 'notificationName', value: input.notificationName }, { name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    x.abp.notification.userNotification.markAllAsRead = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/notification/user-notification',
        type: 'PUT',
        dataType: null
      }, ajaxParams));
    };

    x.abp.notification.userNotification.markAsReaded = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/notification/user-notification/' + id + '',
        type: 'PUT',
        dataType: null
      }, ajaxParams));
    };

  })();

  // controller x.abp.notification.userSubscription

  (function(){

    abp.utils.createNamespace(window, 'x.abp.notification.userSubscription');

    x.abp.notification.userSubscription.subscribe = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/notification/user-subscription/subscribe',
        type: 'POST',
        dataType: null,
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    x.abp.notification.userSubscription.subscribeToAllAvailableNotifications = function(user, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/notification/user-subscription/subscribe-to-all-available-notifications',
        type: 'POST',
        dataType: null,
        data: JSON.stringify(user)
      }, ajaxParams));
    };

    x.abp.notification.userSubscription.unSubscribe = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/notification/user-subscription/un-subscribe',
        type: 'POST',
        dataType: null,
        data: JSON.stringify(input)
      }, ajaxParams));
    };

    x.abp.notification.userSubscription.getSubscribedNotifications = function(user, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/notification/user-subscription/subscribed-notifications' + abp.utils.buildQueryString([{ name: 'tenantId', value: user.tenantId }, { name: 'userId', value: user.userId }]) + '',
        type: 'GET'
      }, ajaxParams));
    };

    x.abp.notification.userSubscription.isSubscribed = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/notification/user-subscription/is-subscribed',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));
    };

  })();

})();


