// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using X.Abp.Notification;
using X.Abp.Notification.Dtos;

// ReSharper disable once CheckNamespace
namespace X.Abp.Notification;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(INotificationAppService), typeof(NotificationClientProxy))]
public partial class NotificationClientProxy : ClientProxyBase<INotificationAppService>, INotificationAppService
{
    public virtual async Task<GetNotificationListResultDto> GetAsync()
    {
        return await RequestAsync<GetNotificationListResultDto>(nameof(GetAsync));
    }

    public virtual async Task<List<NameValue>> GetAssignableNotificationsAsync()
    {
        return await RequestAsync<List<NameValue>>(nameof(GetAssignableNotificationsAsync));
    }

    public virtual async Task<List<NameValue>> GetAssignableNotifiersAsync()
    {
        return await RequestAsync<List<NameValue>>(nameof(GetAssignableNotifiersAsync));
    }

    public virtual async Task SendByCurrentTenantAsync(SendNotificationByCurrentTenantInput input)
    {
        await RequestAsync(nameof(SendByCurrentTenantAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SendNotificationByCurrentTenantInput), input }
        });
    }

    public virtual async Task SendByTenantsAsync(SendNotificationByTenantsInput input)
    {
        await RequestAsync(nameof(SendByTenantsAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SendNotificationByTenantsInput), input }
        });
    }

    public virtual async Task SendByUsersAsync(SendNotificationByUsersInput input)
    {
        await RequestAsync(nameof(SendByUsersAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SendNotificationByUsersInput), input }
        });
    }

    public virtual async Task SendByExcludedUsersAsync(SendNotificationByExcludedUsersInput input)
    {
        await RequestAsync(nameof(SendByExcludedUsersAsync), new ClientProxyRequestTypeValue
        {
            { typeof(SendNotificationByExcludedUsersInput), input }
        });
    }

    public virtual async Task<List<UnPublishedNotificationOutput>> GetUnPublishedNotificationsAsync()
    {
        return await RequestAsync<List<UnPublishedNotificationOutput>>(nameof(GetUnPublishedNotificationsAsync));
    }
}
