// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using X.Abp.Notification;
using X.Abp.Notification.Dtos;

// ReSharper disable once CheckNamespace
namespace X.Abp.Notification;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IUserNotificationAppService), typeof(UserNotificationClientProxy))]
public partial class UserNotificationClientProxy : ClientProxyBase<IUserNotificationAppService>, IUserNotificationAppService
{
    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<UserNotificationInfo> GetAsync(Guid id)
    {
        return await RequestAsync<UserNotificationInfo>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<UserNotificationInfo>> GetListAsync(PagedUserNotificationDto input)
    {
        return await RequestAsync<PagedResultDto<UserNotificationInfo>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PagedUserNotificationDto), input }
        });
    }

    public virtual async Task MarkAllAsReadAsync()
    {
        await RequestAsync(nameof(MarkAllAsReadAsync));
    }

    public virtual async Task MarkAsReadedAsync(Guid id)
    {
        await RequestAsync(nameof(MarkAsReadedAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
